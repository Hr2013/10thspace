// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMSystem.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImsystemRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImsystemRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMSystemMsgInfo ()
@property UInt32 fromUserId;
@property UInt32 toUserId;
@property (strong) NSData* additionMsg;
@property (strong) NSData* attachData;
@end

@implementation IMSystemMsgInfo

- (BOOL) hasFromUserId {
  return !!hasFromUserId_;
}
- (void) setHasFromUserId:(BOOL) _value_ {
  hasFromUserId_ = !!_value_;
}
@synthesize fromUserId;
- (BOOL) hasToUserId {
  return !!hasToUserId_;
}
- (void) setHasToUserId:(BOOL) _value_ {
  hasToUserId_ = !!_value_;
}
@synthesize toUserId;
- (BOOL) hasAdditionMsg {
  return !!hasAdditionMsg_;
}
- (void) setHasAdditionMsg:(BOOL) _value_ {
  hasAdditionMsg_ = !!_value_;
}
@synthesize additionMsg;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.fromUserId = 0;
    self.toUserId = 0;
    self.additionMsg = [NSData data];
    self.attachData = [NSData data];
  }
  return self;
}
static IMSystemMsgInfo* defaultIMSystemMsgInfoInstance = nil;
+ (void) initialize {
  if (self == [IMSystemMsgInfo class]) {
    defaultIMSystemMsgInfoInstance = [[IMSystemMsgInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSystemMsgInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSystemMsgInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFromUserId) {
    return NO;
  }
  if (!self.hasToUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFromUserId) {
    [output writeUInt32:1 value:self.fromUserId];
  }
  if (self.hasToUserId) {
    [output writeUInt32:2 value:self.toUserId];
  }
  if (self.hasAdditionMsg) {
    [output writeData:3 value:self.additionMsg];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFromUserId) {
    size_ += computeUInt32Size(1, self.fromUserId);
  }
  if (self.hasToUserId) {
    size_ += computeUInt32Size(2, self.toUserId);
  }
  if (self.hasAdditionMsg) {
    size_ += computeDataSize(3, self.additionMsg);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSystemMsgInfo*) parseFromData:(NSData*) data {
  return (IMSystemMsgInfo*)[[[IMSystemMsgInfo builder] mergeFromData:data] build];
}
+ (IMSystemMsgInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSystemMsgInfo*)[[[IMSystemMsgInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSystemMsgInfo*) parseFromInputStream:(NSInputStream*) input {
  return (IMSystemMsgInfo*)[[[IMSystemMsgInfo builder] mergeFromInputStream:input] build];
}
+ (IMSystemMsgInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSystemMsgInfo*)[[[IMSystemMsgInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSystemMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSystemMsgInfo*)[[[IMSystemMsgInfo builder] mergeFromCodedInputStream:input] build];
}
+ (IMSystemMsgInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSystemMsgInfo*)[[[IMSystemMsgInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSystemMsgInfoBuilder*) builder {
  return [[IMSystemMsgInfoBuilder alloc] init];
}
+ (IMSystemMsgInfoBuilder*) builderWithPrototype:(IMSystemMsgInfo*) prototype {
  return [[IMSystemMsgInfo builder] mergeFrom:prototype];
}
- (IMSystemMsgInfoBuilder*) builder {
  return [IMSystemMsgInfo builder];
}
- (IMSystemMsgInfoBuilder*) toBuilder {
  return [IMSystemMsgInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFromUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUserId", [NSNumber numberWithInteger:self.fromUserId]];
  }
  if (self.hasToUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toUserId", [NSNumber numberWithInteger:self.toUserId]];
  }
  if (self.hasAdditionMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"additionMsg", self.additionMsg];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFromUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUserId] forKey: @"fromUserId"];
  }
  if (self.hasToUserId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.toUserId] forKey: @"toUserId"];
  }
  if (self.hasAdditionMsg) {
    [dictionary setObject: self.additionMsg forKey: @"additionMsg"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSystemMsgInfo class]]) {
    return NO;
  }
  IMSystemMsgInfo *otherMessage = other;
  return
      self.hasFromUserId == otherMessage.hasFromUserId &&
      (!self.hasFromUserId || self.fromUserId == otherMessage.fromUserId) &&
      self.hasToUserId == otherMessage.hasToUserId &&
      (!self.hasToUserId || self.toUserId == otherMessage.toUserId) &&
      self.hasAdditionMsg == otherMessage.hasAdditionMsg &&
      (!self.hasAdditionMsg || [self.additionMsg isEqual:otherMessage.additionMsg]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFromUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUserId] hash];
  }
  if (self.hasToUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.toUserId] hash];
  }
  if (self.hasAdditionMsg) {
    hashCode = hashCode * 31 + [self.additionMsg hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSystemMsgInfoBuilder()
@property (strong) IMSystemMsgInfo* resultImsystemMsgInfo;
@end

@implementation IMSystemMsgInfoBuilder
@synthesize resultImsystemMsgInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsystemMsgInfo = [[IMSystemMsgInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsystemMsgInfo;
}
- (IMSystemMsgInfoBuilder*) clear {
  self.resultImsystemMsgInfo = [[IMSystemMsgInfo alloc] init];
  return self;
}
- (IMSystemMsgInfoBuilder*) clone {
  return [IMSystemMsgInfo builderWithPrototype:resultImsystemMsgInfo];
}
- (IMSystemMsgInfo*) defaultInstance {
  return [IMSystemMsgInfo defaultInstance];
}
- (IMSystemMsgInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSystemMsgInfo*) buildPartial {
  IMSystemMsgInfo* returnMe = resultImsystemMsgInfo;
  self.resultImsystemMsgInfo = nil;
  return returnMe;
}
- (IMSystemMsgInfoBuilder*) mergeFrom:(IMSystemMsgInfo*) other {
  if (other == [IMSystemMsgInfo defaultInstance]) {
    return self;
  }
  if (other.hasFromUserId) {
    [self setFromUserId:other.fromUserId];
  }
  if (other.hasToUserId) {
    [self setToUserId:other.toUserId];
  }
  if (other.hasAdditionMsg) {
    [self setAdditionMsg:other.additionMsg];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSystemMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSystemMsgInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setFromUserId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setToUserId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setAdditionMsg:[input readData]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasFromUserId {
  return resultImsystemMsgInfo.hasFromUserId;
}
- (UInt32) fromUserId {
  return resultImsystemMsgInfo.fromUserId;
}
- (IMSystemMsgInfoBuilder*) setFromUserId:(UInt32) value {
  resultImsystemMsgInfo.hasFromUserId = YES;
  resultImsystemMsgInfo.fromUserId = value;
  return self;
}
- (IMSystemMsgInfoBuilder*) clearFromUserId {
  resultImsystemMsgInfo.hasFromUserId = NO;
  resultImsystemMsgInfo.fromUserId = 0;
  return self;
}
- (BOOL) hasToUserId {
  return resultImsystemMsgInfo.hasToUserId;
}
- (UInt32) toUserId {
  return resultImsystemMsgInfo.toUserId;
}
- (IMSystemMsgInfoBuilder*) setToUserId:(UInt32) value {
  resultImsystemMsgInfo.hasToUserId = YES;
  resultImsystemMsgInfo.toUserId = value;
  return self;
}
- (IMSystemMsgInfoBuilder*) clearToUserId {
  resultImsystemMsgInfo.hasToUserId = NO;
  resultImsystemMsgInfo.toUserId = 0;
  return self;
}
- (BOOL) hasAdditionMsg {
  return resultImsystemMsgInfo.hasAdditionMsg;
}
- (NSData*) additionMsg {
  return resultImsystemMsgInfo.additionMsg;
}
- (IMSystemMsgInfoBuilder*) setAdditionMsg:(NSData*) value {
  resultImsystemMsgInfo.hasAdditionMsg = YES;
  resultImsystemMsgInfo.additionMsg = value;
  return self;
}
- (IMSystemMsgInfoBuilder*) clearAdditionMsg {
  resultImsystemMsgInfo.hasAdditionMsg = NO;
  resultImsystemMsgInfo.additionMsg = [NSData data];
  return self;
}
- (BOOL) hasAttachData {
  return resultImsystemMsgInfo.hasAttachData;
}
- (NSData*) attachData {
  return resultImsystemMsgInfo.attachData;
}
- (IMSystemMsgInfoBuilder*) setAttachData:(NSData*) value {
  resultImsystemMsgInfo.hasAttachData = YES;
  resultImsystemMsgInfo.attachData = value;
  return self;
}
- (IMSystemMsgInfoBuilder*) clearAttachData {
  resultImsystemMsgInfo.hasAttachData = NO;
  resultImsystemMsgInfo.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
