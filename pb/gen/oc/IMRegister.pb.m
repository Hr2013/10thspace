// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMRegister.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImregisterRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImregisterRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMRegisterReq ()
@property (strong) NSString* userName;
@property (strong) NSString* password;
@property (strong) NSData* attachData;
@end

@implementation IMRegisterReq

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.password = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMRegisterReq* defaultIMRegisterReqInstance = nil;
+ (void) initialize {
  if (self == [IMRegisterReq class]) {
    defaultIMRegisterReqInstance = [[IMRegisterReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRegisterReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRegisterReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserName) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserName) {
    size_ += computeStringSize(1, self.userName);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRegisterReq*) parseFromData:(NSData*) data {
  return (IMRegisterReq*)[[[IMRegisterReq builder] mergeFromData:data] build];
}
+ (IMRegisterReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRegisterReq*)[[[IMRegisterReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRegisterReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRegisterReq*)[[[IMRegisterReq builder] mergeFromInputStream:input] build];
}
+ (IMRegisterReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRegisterReq*)[[[IMRegisterReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRegisterReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRegisterReq*)[[[IMRegisterReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRegisterReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRegisterReq*)[[[IMRegisterReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRegisterReqBuilder*) builder {
  return [[IMRegisterReqBuilder alloc] init];
}
+ (IMRegisterReqBuilder*) builderWithPrototype:(IMRegisterReq*) prototype {
  return [[IMRegisterReq builder] mergeFrom:prototype];
}
- (IMRegisterReqBuilder*) builder {
  return [IMRegisterReq builder];
}
- (IMRegisterReqBuilder*) toBuilder {
  return [IMRegisterReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserName) {
    [dictionary setObject: self.userName forKey: @"userName"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRegisterReq class]]) {
    return NO;
  }
  IMRegisterReq *otherMessage = other;
  return
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRegisterReqBuilder()
@property (strong) IMRegisterReq* resultImregisterReq;
@end

@implementation IMRegisterReqBuilder
@synthesize resultImregisterReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImregisterReq = [[IMRegisterReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImregisterReq;
}
- (IMRegisterReqBuilder*) clear {
  self.resultImregisterReq = [[IMRegisterReq alloc] init];
  return self;
}
- (IMRegisterReqBuilder*) clone {
  return [IMRegisterReq builderWithPrototype:resultImregisterReq];
}
- (IMRegisterReq*) defaultInstance {
  return [IMRegisterReq defaultInstance];
}
- (IMRegisterReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRegisterReq*) buildPartial {
  IMRegisterReq* returnMe = resultImregisterReq;
  self.resultImregisterReq = nil;
  return returnMe;
}
- (IMRegisterReqBuilder*) mergeFrom:(IMRegisterReq*) other {
  if (other == [IMRegisterReq defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRegisterReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRegisterReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return resultImregisterReq.hasUserName;
}
- (NSString*) userName {
  return resultImregisterReq.userName;
}
- (IMRegisterReqBuilder*) setUserName:(NSString*) value {
  resultImregisterReq.hasUserName = YES;
  resultImregisterReq.userName = value;
  return self;
}
- (IMRegisterReqBuilder*) clearUserName {
  resultImregisterReq.hasUserName = NO;
  resultImregisterReq.userName = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultImregisterReq.hasPassword;
}
- (NSString*) password {
  return resultImregisterReq.password;
}
- (IMRegisterReqBuilder*) setPassword:(NSString*) value {
  resultImregisterReq.hasPassword = YES;
  resultImregisterReq.password = value;
  return self;
}
- (IMRegisterReqBuilder*) clearPassword {
  resultImregisterReq.hasPassword = NO;
  resultImregisterReq.password = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImregisterReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImregisterReq.attachData;
}
- (IMRegisterReqBuilder*) setAttachData:(NSData*) value {
  resultImregisterReq.hasAttachData = YES;
  resultImregisterReq.attachData = value;
  return self;
}
- (IMRegisterReqBuilder*) clearAttachData {
  resultImregisterReq.hasAttachData = NO;
  resultImregisterReq.attachData = [NSData data];
  return self;
}
@end

@interface IMRegisterRsp ()
@property ResultType resultCode;
@property (strong) NSString* resultString;
@property (strong) NSData* attachData;
@end

@implementation IMRegisterRsp

- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasResultString {
  return !!hasResultString_;
}
- (void) setHasResultString:(BOOL) _value_ {
  hasResultString_ = !!_value_;
}
@synthesize resultString;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCode = ResultTypeRefuseReasonNone;
    self.resultString = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMRegisterRsp* defaultIMRegisterRspInstance = nil;
+ (void) initialize {
  if (self == [IMRegisterRsp class]) {
    defaultIMRegisterRspInstance = [[IMRegisterRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRegisterRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRegisterRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeEnum:1 value:self.resultCode];
  }
  if (self.hasResultString) {
    [output writeString:2 value:self.resultString];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeEnumSize(1, self.resultCode);
  }
  if (self.hasResultString) {
    size_ += computeStringSize(2, self.resultString);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRegisterRsp*) parseFromData:(NSData*) data {
  return (IMRegisterRsp*)[[[IMRegisterRsp builder] mergeFromData:data] build];
}
+ (IMRegisterRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRegisterRsp*)[[[IMRegisterRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRegisterRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRegisterRsp*)[[[IMRegisterRsp builder] mergeFromInputStream:input] build];
}
+ (IMRegisterRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRegisterRsp*)[[[IMRegisterRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRegisterRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRegisterRsp*)[[[IMRegisterRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRegisterRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRegisterRsp*)[[[IMRegisterRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRegisterRspBuilder*) builder {
  return [[IMRegisterRspBuilder alloc] init];
}
+ (IMRegisterRspBuilder*) builderWithPrototype:(IMRegisterRsp*) prototype {
  return [[IMRegisterRsp builder] mergeFrom:prototype];
}
- (IMRegisterRspBuilder*) builder {
  return [IMRegisterRsp builder];
}
- (IMRegisterRspBuilder*) toBuilder {
  return [IMRegisterRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", NSStringFromResultType(self.resultCode)];
  }
  if (self.hasResultString) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultString", self.resultString];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasResultCode) {
    [dictionary setObject: @(self.resultCode) forKey: @"resultCode"];
  }
  if (self.hasResultString) {
    [dictionary setObject: self.resultString forKey: @"resultString"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRegisterRsp class]]) {
    return NO;
  }
  IMRegisterRsp *otherMessage = other;
  return
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasResultString == otherMessage.hasResultString &&
      (!self.hasResultString || [self.resultString isEqual:otherMessage.resultString]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + self.resultCode;
  }
  if (self.hasResultString) {
    hashCode = hashCode * 31 + [self.resultString hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRegisterRspBuilder()
@property (strong) IMRegisterRsp* resultImregisterRsp;
@end

@implementation IMRegisterRspBuilder
@synthesize resultImregisterRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImregisterRsp = [[IMRegisterRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImregisterRsp;
}
- (IMRegisterRspBuilder*) clear {
  self.resultImregisterRsp = [[IMRegisterRsp alloc] init];
  return self;
}
- (IMRegisterRspBuilder*) clone {
  return [IMRegisterRsp builderWithPrototype:resultImregisterRsp];
}
- (IMRegisterRsp*) defaultInstance {
  return [IMRegisterRsp defaultInstance];
}
- (IMRegisterRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRegisterRsp*) buildPartial {
  IMRegisterRsp* returnMe = resultImregisterRsp;
  self.resultImregisterRsp = nil;
  return returnMe;
}
- (IMRegisterRspBuilder*) mergeFrom:(IMRegisterRsp*) other {
  if (other == [IMRegisterRsp defaultInstance]) {
    return self;
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasResultString) {
    [self setResultString:other.resultString];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRegisterRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRegisterRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ResultType value = (ResultType)[input readEnum];
        if (ResultTypeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setResultString:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasResultCode {
  return resultImregisterRsp.hasResultCode;
}
- (ResultType) resultCode {
  return resultImregisterRsp.resultCode;
}
- (IMRegisterRspBuilder*) setResultCode:(ResultType) value {
  resultImregisterRsp.hasResultCode = YES;
  resultImregisterRsp.resultCode = value;
  return self;
}
- (IMRegisterRspBuilder*) clearResultCode {
  resultImregisterRsp.hasResultCode = NO;
  resultImregisterRsp.resultCode = ResultTypeRefuseReasonNone;
  return self;
}
- (BOOL) hasResultString {
  return resultImregisterRsp.hasResultString;
}
- (NSString*) resultString {
  return resultImregisterRsp.resultString;
}
- (IMRegisterRspBuilder*) setResultString:(NSString*) value {
  resultImregisterRsp.hasResultString = YES;
  resultImregisterRsp.resultString = value;
  return self;
}
- (IMRegisterRspBuilder*) clearResultString {
  resultImregisterRsp.hasResultString = NO;
  resultImregisterRsp.resultString = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImregisterRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImregisterRsp.attachData;
}
- (IMRegisterRspBuilder*) setAttachData:(NSData*) value {
  resultImregisterRsp.hasAttachData = YES;
  resultImregisterRsp.attachData = value;
  return self;
}
- (IMRegisterRspBuilder*) clearAttachData {
  resultImregisterRsp.hasAttachData = NO;
  resultImregisterRsp.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
