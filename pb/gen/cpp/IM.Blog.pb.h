// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Blog.proto

#ifndef PROTOBUF_IM_2eBlog_2eproto__INCLUDED
#define PROTOBUF_IM_2eBlog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace IM {
namespace Blog {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IM_2eBlog_2eproto();
void protobuf_AssignDesc_IM_2eBlog_2eproto();
void protobuf_ShutdownFile_IM_2eBlog_2eproto();

class IMBlogSend;
class IMBlogSendAck;
class IMBlogGetListReq;
class IMBlogGetListRsp;
class IMBlogAddCommentReq;
class IMBlogAddCommentRsp;
class IMBlogGetCommentReq;
class IMBlogGetCommentRsp;

// ===================================================================

class IMBlogSend : public ::google::protobuf::MessageLite {
 public:
  IMBlogSend();
  virtual ~IMBlogSend();

  IMBlogSend(const IMBlogSend& from);

  inline IMBlogSend& operator=(const IMBlogSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogSend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogSend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogSend* other);

  // implements Message ----------------------------------------------

  IMBlogSend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogSend& from);
  void MergeFrom(const IMBlogSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required bytes blog_data = 2;
  inline bool has_blog_data() const;
  inline void clear_blog_data();
  static const int kBlogDataFieldNumber = 2;
  inline const ::std::string& blog_data() const;
  inline void set_blog_data(const ::std::string& value);
  inline void set_blog_data(const char* value);
  inline void set_blog_data(const void* value, size_t size);
  inline ::std::string* mutable_blog_data();
  inline ::std::string* release_blog_data();
  inline void set_allocated_blog_data(::std::string* blog_data);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogSend)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_blog_data();
  inline void clear_has_blog_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* blog_data_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogSend* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogSendAck : public ::google::protobuf::MessageLite {
 public:
  IMBlogSendAck();
  virtual ~IMBlogSendAck();

  IMBlogSendAck(const IMBlogSendAck& from);

  inline IMBlogSendAck& operator=(const IMBlogSendAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogSendAck& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogSendAck* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogSendAck* other);

  // implements Message ----------------------------------------------

  IMBlogSendAck* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogSendAck& from);
  void MergeFrom(const IMBlogSendAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 blog_id = 2;
  inline bool has_blog_id() const;
  inline void clear_blog_id();
  static const int kBlogIdFieldNumber = 2;
  inline ::google::protobuf::uint32 blog_id() const;
  inline void set_blog_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogSendAck)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_blog_id();
  inline void clear_has_blog_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 blog_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogSendAck* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogGetListReq : public ::google::protobuf::MessageLite {
 public:
  IMBlogGetListReq();
  virtual ~IMBlogGetListReq();

  IMBlogGetListReq(const IMBlogGetListReq& from);

  inline IMBlogGetListReq& operator=(const IMBlogGetListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogGetListReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogGetListReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogGetListReq* other);

  // implements Message ----------------------------------------------

  IMBlogGetListReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogGetListReq& from);
  void MergeFrom(const IMBlogGetListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.BlogType blog_type = 3;
  inline bool has_blog_type() const;
  inline void clear_blog_type();
  static const int kBlogTypeFieldNumber = 3;
  inline ::IM::BaseDefine::BlogType blog_type() const;
  inline void set_blog_type(::IM::BaseDefine::BlogType value);

  // required uint32 page = 4;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 4;
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // required uint32 page_size = 5;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 page_size() const;
  inline void set_page_size(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetListReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_blog_type();
  inline void clear_has_blog_type();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_page_size();
  inline void clear_has_page_size();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 update_time_;
  int blog_type_;
  ::google::protobuf::uint32 page_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 page_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogGetListReq* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogGetListRsp : public ::google::protobuf::MessageLite {
 public:
  IMBlogGetListRsp();
  virtual ~IMBlogGetListRsp();

  IMBlogGetListRsp(const IMBlogGetListRsp& from);

  inline IMBlogGetListRsp& operator=(const IMBlogGetListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogGetListRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogGetListRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogGetListRsp* other);

  // implements Message ----------------------------------------------

  IMBlogGetListRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogGetListRsp& from);
  void MergeFrom(const IMBlogGetListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.BlogType blog_type = 2;
  inline bool has_blog_type() const;
  inline void clear_blog_type();
  static const int kBlogTypeFieldNumber = 2;
  inline ::IM::BaseDefine::BlogType blog_type() const;
  inline void set_blog_type(::IM::BaseDefine::BlogType value);

  // required uint32 page = 3;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 3;
  inline ::google::protobuf::uint32 page() const;
  inline void set_page(::google::protobuf::uint32 value);

  // required uint32 page_size = 4;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 page_size() const;
  inline void set_page_size(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.BlogInfo blog_list = 5;
  inline int blog_list_size() const;
  inline void clear_blog_list();
  static const int kBlogListFieldNumber = 5;
  inline const ::IM::BaseDefine::BlogInfo& blog_list(int index) const;
  inline ::IM::BaseDefine::BlogInfo* mutable_blog_list(int index);
  inline ::IM::BaseDefine::BlogInfo* add_blog_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
      blog_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
      mutable_blog_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetListRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_blog_type();
  inline void clear_has_blog_type();
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_page_size();
  inline void clear_has_page_size();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int blog_type_;
  ::google::protobuf::uint32 page_;
  ::google::protobuf::uint32 page_size_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo > blog_list_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogGetListRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogAddCommentReq : public ::google::protobuf::MessageLite {
 public:
  IMBlogAddCommentReq();
  virtual ~IMBlogAddCommentReq();

  IMBlogAddCommentReq(const IMBlogAddCommentReq& from);

  inline IMBlogAddCommentReq& operator=(const IMBlogAddCommentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogAddCommentReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogAddCommentReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogAddCommentReq* other);

  // implements Message ----------------------------------------------

  IMBlogAddCommentReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogAddCommentReq& from);
  void MergeFrom(const IMBlogAddCommentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 blog_id = 2;
  inline bool has_blog_id() const;
  inline void clear_blog_id();
  static const int kBlogIdFieldNumber = 2;
  inline ::google::protobuf::uint32 blog_id() const;
  inline void set_blog_id(::google::protobuf::uint32 value);

  // required bytes blog_data = 3;
  inline bool has_blog_data() const;
  inline void clear_blog_data();
  static const int kBlogDataFieldNumber = 3;
  inline const ::std::string& blog_data() const;
  inline void set_blog_data(const ::std::string& value);
  inline void set_blog_data(const char* value);
  inline void set_blog_data(const void* value, size_t size);
  inline ::std::string* mutable_blog_data();
  inline ::std::string* release_blog_data();
  inline void set_allocated_blog_data(::std::string* blog_data);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogAddCommentReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_blog_id();
  inline void clear_has_blog_id();
  inline void set_has_blog_data();
  inline void clear_has_blog_data();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 blog_id_;
  ::std::string* blog_data_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogAddCommentReq* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogAddCommentRsp : public ::google::protobuf::MessageLite {
 public:
  IMBlogAddCommentRsp();
  virtual ~IMBlogAddCommentRsp();

  IMBlogAddCommentRsp(const IMBlogAddCommentRsp& from);

  inline IMBlogAddCommentRsp& operator=(const IMBlogAddCommentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogAddCommentRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogAddCommentRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogAddCommentRsp* other);

  // implements Message ----------------------------------------------

  IMBlogAddCommentRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogAddCommentRsp& from);
  void MergeFrom(const IMBlogAddCommentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // required uint32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 result_code() const;
  inline void set_result_code(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogAddCommentRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 comment_id_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 result_code_;
  ::std::string* attach_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogAddCommentRsp* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogGetCommentReq : public ::google::protobuf::MessageLite {
 public:
  IMBlogGetCommentReq();
  virtual ~IMBlogGetCommentReq();

  IMBlogGetCommentReq(const IMBlogGetCommentReq& from);

  inline IMBlogGetCommentReq& operator=(const IMBlogGetCommentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogGetCommentReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogGetCommentReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogGetCommentReq* other);

  // implements Message ----------------------------------------------

  IMBlogGetCommentReq* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogGetCommentReq& from);
  void MergeFrom(const IMBlogGetCommentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 blog_id = 2;
  inline bool has_blog_id() const;
  inline void clear_blog_id();
  static const int kBlogIdFieldNumber = 2;
  inline ::google::protobuf::uint32 blog_id() const;
  inline void set_blog_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetCommentReq)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_blog_id();
  inline void clear_has_blog_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 blog_id_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogGetCommentReq* default_instance_;
};
// -------------------------------------------------------------------

class IMBlogGetCommentRsp : public ::google::protobuf::MessageLite {
 public:
  IMBlogGetCommentRsp();
  virtual ~IMBlogGetCommentRsp();

  IMBlogGetCommentRsp(const IMBlogGetCommentRsp& from);

  inline IMBlogGetCommentRsp& operator=(const IMBlogGetCommentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const IMBlogGetCommentRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const IMBlogGetCommentRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(IMBlogGetCommentRsp* other);

  // implements Message ----------------------------------------------

  IMBlogGetCommentRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const IMBlogGetCommentRsp& from);
  void MergeFrom(const IMBlogGetCommentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required uint32 blog_id = 2;
  inline bool has_blog_id() const;
  inline void clear_blog_id();
  static const int kBlogIdFieldNumber = 2;
  inline ::google::protobuf::uint32 blog_id() const;
  inline void set_blog_id(::google::protobuf::uint32 value);

  // required uint32 update_time = 3;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // repeated .IM.BaseDefine.BlogInfo comment_list = 4;
  inline int comment_list_size() const;
  inline void clear_comment_list();
  static const int kCommentListFieldNumber = 4;
  inline const ::IM::BaseDefine::BlogInfo& comment_list(int index) const;
  inline ::IM::BaseDefine::BlogInfo* mutable_comment_list(int index);
  inline ::IM::BaseDefine::BlogInfo* add_comment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
      comment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
      mutable_comment_list();

  // optional bytes attach_data = 20;
  inline bool has_attach_data() const;
  inline void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  inline const ::std::string& attach_data() const;
  inline void set_attach_data(const ::std::string& value);
  inline void set_attach_data(const char* value);
  inline void set_attach_data(const void* value, size_t size);
  inline ::std::string* mutable_attach_data();
  inline ::std::string* release_attach_data();
  inline void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Blog.IMBlogGetCommentRsp)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_blog_id();
  inline void clear_has_blog_id();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_attach_data();
  inline void clear_has_attach_data();

  ::std::string _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 blog_id_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo > comment_list_;
  ::std::string* attach_data_;
  ::google::protobuf::uint32 update_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_IM_2eBlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_IM_2eBlog_2eproto();
  friend void protobuf_ShutdownFile_IM_2eBlog_2eproto();

  void InitAsDefaultInstance();
  static IMBlogGetCommentRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// IMBlogSend

// required uint32 user_id = 1;
inline bool IMBlogSend::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogSend::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogSend::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogSend::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogSend::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSend.user_id)
  return user_id_;
}
inline void IMBlogSend::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSend.user_id)
}

// required bytes blog_data = 2;
inline bool IMBlogSend::has_blog_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogSend::set_has_blog_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogSend::clear_has_blog_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogSend::clear_blog_data() {
  if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_->clear();
  }
  clear_has_blog_data();
}
inline const ::std::string& IMBlogSend::blog_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSend.blog_data)
  return *blog_data_;
}
inline void IMBlogSend::set_blog_data(const ::std::string& value) {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  blog_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSend.blog_data)
}
inline void IMBlogSend::set_blog_data(const char* value) {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  blog_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSend.blog_data)
}
inline void IMBlogSend::set_blog_data(const void* value, size_t size) {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  blog_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSend.blog_data)
}
inline ::std::string* IMBlogSend::mutable_blog_data() {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSend.blog_data)
  return blog_data_;
}
inline ::std::string* IMBlogSend::release_blog_data() {
  clear_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blog_data_;
    blog_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogSend::set_allocated_blog_data(::std::string* blog_data) {
  if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blog_data_;
  }
  if (blog_data) {
    set_has_blog_data();
    blog_data_ = blog_data;
  } else {
    clear_has_blog_data();
    blog_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSend.blog_data)
}

// optional bytes attach_data = 20;
inline bool IMBlogSend::has_attach_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogSend::set_has_attach_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogSend::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogSend::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogSend::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSend.attach_data)
  return *attach_data_;
}
inline void IMBlogSend::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSend.attach_data)
}
inline void IMBlogSend::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSend.attach_data)
}
inline void IMBlogSend::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSend.attach_data)
}
inline ::std::string* IMBlogSend::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSend.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogSend::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogSend::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSend.attach_data)
}

// -------------------------------------------------------------------

// IMBlogSendAck

// required uint32 user_id = 1;
inline bool IMBlogSendAck::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogSendAck::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogSendAck::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogSendAck::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogSendAck::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.user_id)
  return user_id_;
}
inline void IMBlogSendAck::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.user_id)
}

// required uint32 blog_id = 2;
inline bool IMBlogSendAck::has_blog_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogSendAck::set_has_blog_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogSendAck::clear_has_blog_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogSendAck::clear_blog_id() {
  blog_id_ = 0u;
  clear_has_blog_id();
}
inline ::google::protobuf::uint32 IMBlogSendAck::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.blog_id)
  return blog_id_;
}
inline void IMBlogSendAck::set_blog_id(::google::protobuf::uint32 value) {
  set_has_blog_id();
  blog_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.blog_id)
}

// required uint32 update_time = 3;
inline bool IMBlogSendAck::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogSendAck::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogSendAck::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogSendAck::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMBlogSendAck::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.update_time)
  return update_time_;
}
inline void IMBlogSendAck::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.update_time)
}

// optional bytes attach_data = 20;
inline bool IMBlogSendAck::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBlogSendAck::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBlogSendAck::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBlogSendAck::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogSendAck::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogSendAck.attach_data)
  return *attach_data_;
}
inline void IMBlogSendAck::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogSendAck.attach_data)
}
inline void IMBlogSendAck::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogSendAck.attach_data)
}
inline void IMBlogSendAck::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogSendAck.attach_data)
}
inline ::std::string* IMBlogSendAck::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogSendAck.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogSendAck::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogSendAck::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogSendAck.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetListReq

// required uint32 user_id = 1;
inline bool IMBlogGetListReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogGetListReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogGetListReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogGetListReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogGetListReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.user_id)
  return user_id_;
}
inline void IMBlogGetListReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.user_id)
}

// required uint32 update_time = 2;
inline bool IMBlogGetListReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogGetListReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogGetListReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogGetListReq::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMBlogGetListReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.update_time)
  return update_time_;
}
inline void IMBlogGetListReq::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.update_time)
}

// required .IM.BaseDefine.BlogType blog_type = 3;
inline bool IMBlogGetListReq::has_blog_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogGetListReq::set_has_blog_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogGetListReq::clear_has_blog_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogGetListReq::clear_blog_type() {
  blog_type_ = 1;
  clear_has_blog_type();
}
inline ::IM::BaseDefine::BlogType IMBlogGetListReq::blog_type() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.blog_type)
  return static_cast< ::IM::BaseDefine::BlogType >(blog_type_);
}
inline void IMBlogGetListReq::set_blog_type(::IM::BaseDefine::BlogType value) {
  assert(::IM::BaseDefine::BlogType_IsValid(value));
  set_has_blog_type();
  blog_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.blog_type)
}

// required uint32 page = 4;
inline bool IMBlogGetListReq::has_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBlogGetListReq::set_has_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBlogGetListReq::clear_has_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBlogGetListReq::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 IMBlogGetListReq::page() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.page)
  return page_;
}
inline void IMBlogGetListReq::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.page)
}

// required uint32 page_size = 5;
inline bool IMBlogGetListReq::has_page_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMBlogGetListReq::set_has_page_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMBlogGetListReq::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMBlogGetListReq::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
inline ::google::protobuf::uint32 IMBlogGetListReq::page_size() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.page_size)
  return page_size_;
}
inline void IMBlogGetListReq::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.page_size)
}

// optional bytes attach_data = 20;
inline bool IMBlogGetListReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMBlogGetListReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMBlogGetListReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMBlogGetListReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogGetListReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListReq.attach_data)
  return *attach_data_;
}
inline void IMBlogGetListReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListReq.attach_data)
}
inline void IMBlogGetListReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetListReq.attach_data)
}
inline void IMBlogGetListReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetListReq.attach_data)
}
inline ::std::string* IMBlogGetListReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogGetListReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogGetListReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetListReq.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetListRsp

// required uint32 user_id = 1;
inline bool IMBlogGetListRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogGetListRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogGetListRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogGetListRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogGetListRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.user_id)
  return user_id_;
}
inline void IMBlogGetListRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.user_id)
}

// required .IM.BaseDefine.BlogType blog_type = 2;
inline bool IMBlogGetListRsp::has_blog_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogGetListRsp::set_has_blog_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogGetListRsp::clear_has_blog_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogGetListRsp::clear_blog_type() {
  blog_type_ = 1;
  clear_has_blog_type();
}
inline ::IM::BaseDefine::BlogType IMBlogGetListRsp::blog_type() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.blog_type)
  return static_cast< ::IM::BaseDefine::BlogType >(blog_type_);
}
inline void IMBlogGetListRsp::set_blog_type(::IM::BaseDefine::BlogType value) {
  assert(::IM::BaseDefine::BlogType_IsValid(value));
  set_has_blog_type();
  blog_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.blog_type)
}

// required uint32 page = 3;
inline bool IMBlogGetListRsp::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogGetListRsp::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogGetListRsp::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogGetListRsp::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 IMBlogGetListRsp::page() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.page)
  return page_;
}
inline void IMBlogGetListRsp::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.page)
}

// required uint32 page_size = 4;
inline bool IMBlogGetListRsp::has_page_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBlogGetListRsp::set_has_page_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBlogGetListRsp::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBlogGetListRsp::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
inline ::google::protobuf::uint32 IMBlogGetListRsp::page_size() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.page_size)
  return page_size_;
}
inline void IMBlogGetListRsp::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.page_size)
}

// repeated .IM.BaseDefine.BlogInfo blog_list = 5;
inline int IMBlogGetListRsp::blog_list_size() const {
  return blog_list_.size();
}
inline void IMBlogGetListRsp::clear_blog_list() {
  blog_list_.Clear();
}
inline const ::IM::BaseDefine::BlogInfo& IMBlogGetListRsp::blog_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.blog_list)
  return blog_list_.Get(index);
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetListRsp::mutable_blog_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListRsp.blog_list)
  return blog_list_.Mutable(index);
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetListRsp::add_blog_list() {
  // @@protoc_insertion_point(field_add:IM.Blog.IMBlogGetListRsp.blog_list)
  return blog_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
IMBlogGetListRsp::blog_list() const {
  // @@protoc_insertion_point(field_list:IM.Blog.IMBlogGetListRsp.blog_list)
  return blog_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
IMBlogGetListRsp::mutable_blog_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Blog.IMBlogGetListRsp.blog_list)
  return &blog_list_;
}

// optional bytes attach_data = 20;
inline bool IMBlogGetListRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMBlogGetListRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMBlogGetListRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMBlogGetListRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogGetListRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetListRsp.attach_data)
  return *attach_data_;
}
inline void IMBlogGetListRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline void IMBlogGetListRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline void IMBlogGetListRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetListRsp.attach_data)
}
inline ::std::string* IMBlogGetListRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetListRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogGetListRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogGetListRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetListRsp.attach_data)
}

// -------------------------------------------------------------------

// IMBlogAddCommentReq

// required uint32 user_id = 1;
inline bool IMBlogAddCommentReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogAddCommentReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogAddCommentReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogAddCommentReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogAddCommentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.user_id)
  return user_id_;
}
inline void IMBlogAddCommentReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.user_id)
}

// required uint32 blog_id = 2;
inline bool IMBlogAddCommentReq::has_blog_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogAddCommentReq::set_has_blog_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogAddCommentReq::clear_has_blog_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogAddCommentReq::clear_blog_id() {
  blog_id_ = 0u;
  clear_has_blog_id();
}
inline ::google::protobuf::uint32 IMBlogAddCommentReq::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.blog_id)
  return blog_id_;
}
inline void IMBlogAddCommentReq::set_blog_id(::google::protobuf::uint32 value) {
  set_has_blog_id();
  blog_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.blog_id)
}

// required bytes blog_data = 3;
inline bool IMBlogAddCommentReq::has_blog_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogAddCommentReq::set_has_blog_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogAddCommentReq::clear_has_blog_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogAddCommentReq::clear_blog_data() {
  if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_->clear();
  }
  clear_has_blog_data();
}
inline const ::std::string& IMBlogAddCommentReq::blog_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.blog_data)
  return *blog_data_;
}
inline void IMBlogAddCommentReq::set_blog_data(const ::std::string& value) {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  blog_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline void IMBlogAddCommentReq::set_blog_data(const char* value) {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  blog_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline void IMBlogAddCommentReq::set_blog_data(const void* value, size_t size) {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  blog_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentReq.blog_data)
}
inline ::std::string* IMBlogAddCommentReq::mutable_blog_data() {
  set_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blog_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentReq.blog_data)
  return blog_data_;
}
inline ::std::string* IMBlogAddCommentReq::release_blog_data() {
  clear_has_blog_data();
  if (blog_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blog_data_;
    blog_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogAddCommentReq::set_allocated_blog_data(::std::string* blog_data) {
  if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blog_data_;
  }
  if (blog_data) {
    set_has_blog_data();
    blog_data_ = blog_data;
  } else {
    clear_has_blog_data();
    blog_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentReq.blog_data)
}

// optional bytes attach_data = 20;
inline bool IMBlogAddCommentReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBlogAddCommentReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBlogAddCommentReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBlogAddCommentReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogAddCommentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentReq.attach_data)
  return *attach_data_;
}
inline void IMBlogAddCommentReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline void IMBlogAddCommentReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline void IMBlogAddCommentReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentReq.attach_data)
}
inline ::std::string* IMBlogAddCommentReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogAddCommentReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogAddCommentReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentReq.attach_data)
}

// -------------------------------------------------------------------

// IMBlogAddCommentRsp

// required uint32 user_id = 1;
inline bool IMBlogAddCommentRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogAddCommentRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogAddCommentRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogAddCommentRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogAddCommentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.user_id)
  return user_id_;
}
inline void IMBlogAddCommentRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.user_id)
}

// required uint32 comment_id = 2;
inline bool IMBlogAddCommentRsp::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogAddCommentRsp::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogAddCommentRsp::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogAddCommentRsp::clear_comment_id() {
  comment_id_ = 0u;
  clear_has_comment_id();
}
inline ::google::protobuf::uint32 IMBlogAddCommentRsp::comment_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.comment_id)
  return comment_id_;
}
inline void IMBlogAddCommentRsp::set_comment_id(::google::protobuf::uint32 value) {
  set_has_comment_id();
  comment_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.comment_id)
}

// required uint32 update_time = 3;
inline bool IMBlogAddCommentRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogAddCommentRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogAddCommentRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogAddCommentRsp::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMBlogAddCommentRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.update_time)
  return update_time_;
}
inline void IMBlogAddCommentRsp::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.update_time)
}

// required uint32 result_code = 4;
inline bool IMBlogAddCommentRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBlogAddCommentRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBlogAddCommentRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBlogAddCommentRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMBlogAddCommentRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.result_code)
  return result_code_;
}
inline void IMBlogAddCommentRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.result_code)
}

// optional bytes attach_data = 20;
inline bool IMBlogAddCommentRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMBlogAddCommentRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMBlogAddCommentRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMBlogAddCommentRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogAddCommentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogAddCommentRsp.attach_data)
  return *attach_data_;
}
inline void IMBlogAddCommentRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline void IMBlogAddCommentRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline void IMBlogAddCommentRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogAddCommentRsp.attach_data)
}
inline ::std::string* IMBlogAddCommentRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogAddCommentRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogAddCommentRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogAddCommentRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogAddCommentRsp.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetCommentReq

// required uint32 user_id = 1;
inline bool IMBlogGetCommentReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogGetCommentReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogGetCommentReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogGetCommentReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogGetCommentReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.user_id)
  return user_id_;
}
inline void IMBlogGetCommentReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.user_id)
}

// required uint32 blog_id = 2;
inline bool IMBlogGetCommentReq::has_blog_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogGetCommentReq::set_has_blog_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogGetCommentReq::clear_has_blog_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogGetCommentReq::clear_blog_id() {
  blog_id_ = 0u;
  clear_has_blog_id();
}
inline ::google::protobuf::uint32 IMBlogGetCommentReq::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.blog_id)
  return blog_id_;
}
inline void IMBlogGetCommentReq::set_blog_id(::google::protobuf::uint32 value) {
  set_has_blog_id();
  blog_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.blog_id)
}

// required uint32 update_time = 3;
inline bool IMBlogGetCommentReq::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogGetCommentReq::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogGetCommentReq::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogGetCommentReq::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMBlogGetCommentReq::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.update_time)
  return update_time_;
}
inline void IMBlogGetCommentReq::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.update_time)
}

// optional bytes attach_data = 20;
inline bool IMBlogGetCommentReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMBlogGetCommentReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMBlogGetCommentReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMBlogGetCommentReq::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogGetCommentReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentReq.attach_data)
  return *attach_data_;
}
inline void IMBlogGetCommentReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline void IMBlogGetCommentReq::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline void IMBlogGetCommentReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetCommentReq.attach_data)
}
inline ::std::string* IMBlogGetCommentReq::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentReq.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogGetCommentReq::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogGetCommentReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetCommentReq.attach_data)
}

// -------------------------------------------------------------------

// IMBlogGetCommentRsp

// required uint32 user_id = 1;
inline bool IMBlogGetCommentRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMBlogGetCommentRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMBlogGetCommentRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMBlogGetCommentRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMBlogGetCommentRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.user_id)
  return user_id_;
}
inline void IMBlogGetCommentRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.user_id)
}

// required uint32 blog_id = 2;
inline bool IMBlogGetCommentRsp::has_blog_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMBlogGetCommentRsp::set_has_blog_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMBlogGetCommentRsp::clear_has_blog_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMBlogGetCommentRsp::clear_blog_id() {
  blog_id_ = 0u;
  clear_has_blog_id();
}
inline ::google::protobuf::uint32 IMBlogGetCommentRsp::blog_id() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.blog_id)
  return blog_id_;
}
inline void IMBlogGetCommentRsp::set_blog_id(::google::protobuf::uint32 value) {
  set_has_blog_id();
  blog_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.blog_id)
}

// required uint32 update_time = 3;
inline bool IMBlogGetCommentRsp::has_update_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMBlogGetCommentRsp::set_has_update_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMBlogGetCommentRsp::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMBlogGetCommentRsp::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 IMBlogGetCommentRsp::update_time() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.update_time)
  return update_time_;
}
inline void IMBlogGetCommentRsp::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.update_time)
}

// repeated .IM.BaseDefine.BlogInfo comment_list = 4;
inline int IMBlogGetCommentRsp::comment_list_size() const {
  return comment_list_.size();
}
inline void IMBlogGetCommentRsp::clear_comment_list() {
  comment_list_.Clear();
}
inline const ::IM::BaseDefine::BlogInfo& IMBlogGetCommentRsp::comment_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return comment_list_.Get(index);
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetCommentRsp::mutable_comment_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return comment_list_.Mutable(index);
}
inline ::IM::BaseDefine::BlogInfo* IMBlogGetCommentRsp::add_comment_list() {
  // @@protoc_insertion_point(field_add:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return comment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >&
IMBlogGetCommentRsp::comment_list() const {
  // @@protoc_insertion_point(field_list:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return comment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::BlogInfo >*
IMBlogGetCommentRsp::mutable_comment_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Blog.IMBlogGetCommentRsp.comment_list)
  return &comment_list_;
}

// optional bytes attach_data = 20;
inline bool IMBlogGetCommentRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMBlogGetCommentRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMBlogGetCommentRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMBlogGetCommentRsp::clear_attach_data() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_->clear();
  }
  clear_has_attach_data();
}
inline const ::std::string& IMBlogGetCommentRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Blog.IMBlogGetCommentRsp.attach_data)
  return *attach_data_;
}
inline void IMBlogGetCommentRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline void IMBlogGetCommentRsp::set_attach_data(const char* value) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline void IMBlogGetCommentRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  attach_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IM.Blog.IMBlogGetCommentRsp.attach_data)
}
inline ::std::string* IMBlogGetCommentRsp::mutable_attach_data() {
  set_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    attach_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:IM.Blog.IMBlogGetCommentRsp.attach_data)
  return attach_data_;
}
inline ::std::string* IMBlogGetCommentRsp::release_attach_data() {
  clear_has_attach_data();
  if (attach_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = attach_data_;
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IMBlogGetCommentRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  if (attach_data) {
    set_has_attach_data();
    attach_data_ = attach_data;
  } else {
    clear_has_attach_data();
    attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:IM.Blog.IMBlogGetCommentRsp.attach_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Blog
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eBlog_2eproto__INCLUDED
