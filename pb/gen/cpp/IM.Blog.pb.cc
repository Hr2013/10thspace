// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Blog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IM.Blog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace IM {
namespace Blog {

void protobuf_ShutdownFile_IM_2eBlog_2eproto() {
  delete IMBlogSend::default_instance_;
  delete IMBlogSendAck::default_instance_;
  delete IMBlogGetListReq::default_instance_;
  delete IMBlogGetListRsp::default_instance_;
  delete IMBlogAddCommentReq::default_instance_;
  delete IMBlogAddCommentRsp::default_instance_;
  delete IMBlogGetCommentReq::default_instance_;
  delete IMBlogGetCommentRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_IM_2eBlog_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_IM_2eBlog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::IM::BaseDefine::protobuf_AddDesc_IM_2eBaseDefine_2eproto();
  IMBlogSend::default_instance_ = new IMBlogSend();
  IMBlogSendAck::default_instance_ = new IMBlogSendAck();
  IMBlogGetListReq::default_instance_ = new IMBlogGetListReq();
  IMBlogGetListRsp::default_instance_ = new IMBlogGetListRsp();
  IMBlogAddCommentReq::default_instance_ = new IMBlogAddCommentReq();
  IMBlogAddCommentRsp::default_instance_ = new IMBlogAddCommentRsp();
  IMBlogGetCommentReq::default_instance_ = new IMBlogGetCommentReq();
  IMBlogGetCommentRsp::default_instance_ = new IMBlogGetCommentRsp();
  IMBlogSend::default_instance_->InitAsDefaultInstance();
  IMBlogSendAck::default_instance_->InitAsDefaultInstance();
  IMBlogGetListReq::default_instance_->InitAsDefaultInstance();
  IMBlogGetListRsp::default_instance_->InitAsDefaultInstance();
  IMBlogAddCommentReq::default_instance_->InitAsDefaultInstance();
  IMBlogAddCommentRsp::default_instance_->InitAsDefaultInstance();
  IMBlogGetCommentReq::default_instance_->InitAsDefaultInstance();
  IMBlogGetCommentRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IM_2eBlog_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_IM_2eBlog_2eproto_once_);
void protobuf_AddDesc_IM_2eBlog_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_IM_2eBlog_2eproto_once_,
                 &protobuf_AddDesc_IM_2eBlog_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IM_2eBlog_2eproto {
  StaticDescriptorInitializer_IM_2eBlog_2eproto() {
    protobuf_AddDesc_IM_2eBlog_2eproto();
  }
} static_descriptor_initializer_IM_2eBlog_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int IMBlogSend::kUserIdFieldNumber;
const int IMBlogSend::kBlogDataFieldNumber;
const int IMBlogSend::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogSend::IMBlogSend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogSend)
}

void IMBlogSend::InitAsDefaultInstance() {
}

IMBlogSend::IMBlogSend(const IMBlogSend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogSend)
}

void IMBlogSend::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  blog_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogSend::~IMBlogSend() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogSend)
  SharedDtor();
}

void IMBlogSend::SharedDtor() {
  if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blog_data_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogSend& IMBlogSend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogSend* IMBlogSend::default_instance_ = NULL;

IMBlogSend* IMBlogSend::New() const {
  return new IMBlogSend;
}

void IMBlogSend::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    user_id_ = 0u;
    if (has_blog_data()) {
      if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blog_data_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogSend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blog_data;
        break;
      }

      // required bytes blog_data = 2;
      case 2: {
        if (tag == 18) {
         parse_blog_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blog_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogSend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogSend)
  return false;
#undef DO_
}

void IMBlogSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogSend)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required bytes blog_data = 2;
  if (has_blog_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->blog_data(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogSend)
}

int IMBlogSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required bytes blog_data = 2;
    if (has_blog_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blog_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogSend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogSend*>(&from));
}

void IMBlogSend::MergeFrom(const IMBlogSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_blog_data()) {
      set_blog_data(from.blog_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogSend::CopyFrom(const IMBlogSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IMBlogSend::Swap(IMBlogSend* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(blog_data_, other->blog_data_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogSend::GetTypeName() const {
  return "IM.Blog.IMBlogSend";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogSendAck::kUserIdFieldNumber;
const int IMBlogSendAck::kBlogIdFieldNumber;
const int IMBlogSendAck::kUpdateTimeFieldNumber;
const int IMBlogSendAck::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogSendAck::IMBlogSendAck()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogSendAck)
}

void IMBlogSendAck::InitAsDefaultInstance() {
}

IMBlogSendAck::IMBlogSendAck(const IMBlogSendAck& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogSendAck)
}

void IMBlogSendAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  blog_id_ = 0u;
  update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogSendAck::~IMBlogSendAck() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogSendAck)
  SharedDtor();
}

void IMBlogSendAck::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogSendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogSendAck& IMBlogSendAck::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogSendAck* IMBlogSendAck::default_instance_ = NULL;

IMBlogSendAck* IMBlogSendAck::New() const {
  return new IMBlogSendAck;
}

void IMBlogSendAck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogSendAck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, blog_id_);
    update_time_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogSendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogSendAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blog_id;
        break;
      }

      // required uint32 blog_id = 2;
      case 2: {
        if (tag == 16) {
         parse_blog_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blog_id_)));
          set_has_blog_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogSendAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogSendAck)
  return false;
#undef DO_
}

void IMBlogSendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogSendAck)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 blog_id = 2;
  if (has_blog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blog_id(), output);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogSendAck)
}

int IMBlogSendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 blog_id = 2;
    if (has_blog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blog_id());
    }

    // required uint32 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogSendAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogSendAck*>(&from));
}

void IMBlogSendAck::MergeFrom(const IMBlogSendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_blog_id()) {
      set_blog_id(from.blog_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogSendAck::CopyFrom(const IMBlogSendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogSendAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMBlogSendAck::Swap(IMBlogSendAck* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(blog_id_, other->blog_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogSendAck::GetTypeName() const {
  return "IM.Blog.IMBlogSendAck";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogGetListReq::kUserIdFieldNumber;
const int IMBlogGetListReq::kUpdateTimeFieldNumber;
const int IMBlogGetListReq::kBlogTypeFieldNumber;
const int IMBlogGetListReq::kPageFieldNumber;
const int IMBlogGetListReq::kPageSizeFieldNumber;
const int IMBlogGetListReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogGetListReq::IMBlogGetListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogGetListReq)
}

void IMBlogGetListReq::InitAsDefaultInstance() {
}

IMBlogGetListReq::IMBlogGetListReq(const IMBlogGetListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogGetListReq)
}

void IMBlogGetListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  update_time_ = 0u;
  blog_type_ = 1;
  page_ = 0u;
  page_size_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogGetListReq::~IMBlogGetListReq() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogGetListReq)
  SharedDtor();
}

void IMBlogGetListReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogGetListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogGetListReq& IMBlogGetListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogGetListReq* IMBlogGetListReq::default_instance_ = NULL;

IMBlogGetListReq* IMBlogGetListReq::New() const {
  return new IMBlogGetListReq;
}

void IMBlogGetListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogGetListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(user_id_, update_time_);
    blog_type_ = 1;
    page_ = 0u;
    page_size_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogGetListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogGetListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 2;
      case 2: {
        if (tag == 16) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_blog_type;
        break;
      }

      // required .IM.BaseDefine.BlogType blog_type = 3;
      case 3: {
        if (tag == 24) {
         parse_blog_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::BlogType_IsValid(value)) {
            set_blog_type(static_cast< ::IM::BaseDefine::BlogType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }

      // required uint32 page = 4;
      case 4: {
        if (tag == 32) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_page_size;
        break;
      }

      // required uint32 page_size = 5;
      case 5: {
        if (tag == 40) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogGetListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogGetListReq)
  return false;
#undef DO_
}

void IMBlogGetListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogGetListReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_time(), output);
  }

  // required .IM.BaseDefine.BlogType blog_type = 3;
  if (has_blog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->blog_type(), output);
  }

  // required uint32 page = 4;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page(), output);
  }

  // required uint32 page_size = 5;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->page_size(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogGetListReq)
}

int IMBlogGetListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required .IM.BaseDefine.BlogType blog_type = 3;
    if (has_blog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blog_type());
    }

    // required uint32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // required uint32 page_size = 5;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogGetListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogGetListReq*>(&from));
}

void IMBlogGetListReq::MergeFrom(const IMBlogGetListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_blog_type()) {
      set_blog_type(from.blog_type());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogGetListReq::CopyFrom(const IMBlogGetListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogGetListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void IMBlogGetListReq::Swap(IMBlogGetListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(blog_type_, other->blog_type_);
    std::swap(page_, other->page_);
    std::swap(page_size_, other->page_size_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogGetListReq::GetTypeName() const {
  return "IM.Blog.IMBlogGetListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogGetListRsp::kUserIdFieldNumber;
const int IMBlogGetListRsp::kBlogTypeFieldNumber;
const int IMBlogGetListRsp::kPageFieldNumber;
const int IMBlogGetListRsp::kPageSizeFieldNumber;
const int IMBlogGetListRsp::kBlogListFieldNumber;
const int IMBlogGetListRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogGetListRsp::IMBlogGetListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogGetListRsp)
}

void IMBlogGetListRsp::InitAsDefaultInstance() {
}

IMBlogGetListRsp::IMBlogGetListRsp(const IMBlogGetListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogGetListRsp)
}

void IMBlogGetListRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  blog_type_ = 1;
  page_ = 0u;
  page_size_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogGetListRsp::~IMBlogGetListRsp() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogGetListRsp)
  SharedDtor();
}

void IMBlogGetListRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogGetListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogGetListRsp& IMBlogGetListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogGetListRsp* IMBlogGetListRsp::default_instance_ = NULL;

IMBlogGetListRsp* IMBlogGetListRsp::New() const {
  return new IMBlogGetListRsp;
}

void IMBlogGetListRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogGetListRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(page_, page_size_);
    user_id_ = 0u;
    blog_type_ = 1;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  blog_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogGetListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogGetListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blog_type;
        break;
      }

      // required .IM.BaseDefine.BlogType blog_type = 2;
      case 2: {
        if (tag == 16) {
         parse_blog_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IM::BaseDefine::BlogType_IsValid(value)) {
            set_blog_type(static_cast< ::IM::BaseDefine::BlogType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_page;
        break;
      }

      // required uint32 page = 3;
      case 3: {
        if (tag == 24) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_page_size;
        break;
      }

      // required uint32 page_size = 4;
      case 4: {
        if (tag == 32) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blog_list;
        break;
      }

      // repeated .IM.BaseDefine.BlogInfo blog_list = 5;
      case 5: {
        if (tag == 42) {
         parse_blog_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blog_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_blog_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogGetListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogGetListRsp)
  return false;
#undef DO_
}

void IMBlogGetListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogGetListRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required .IM.BaseDefine.BlogType blog_type = 2;
  if (has_blog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->blog_type(), output);
  }

  // required uint32 page = 3;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->page(), output);
  }

  // required uint32 page_size = 4;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page_size(), output);
  }

  // repeated .IM.BaseDefine.BlogInfo blog_list = 5;
  for (int i = 0; i < this->blog_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->blog_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogGetListRsp)
}

int IMBlogGetListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required .IM.BaseDefine.BlogType blog_type = 2;
    if (has_blog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blog_type());
    }

    // required uint32 page = 3;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // required uint32 page_size = 4;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.BlogInfo blog_list = 5;
  total_size += 1 * this->blog_list_size();
  for (int i = 0; i < this->blog_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blog_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogGetListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogGetListRsp*>(&from));
}

void IMBlogGetListRsp::MergeFrom(const IMBlogGetListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  blog_list_.MergeFrom(from.blog_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_blog_type()) {
      set_blog_type(from.blog_type());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogGetListRsp::CopyFrom(const IMBlogGetListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogGetListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->blog_list())) return false;
  return true;
}

void IMBlogGetListRsp::Swap(IMBlogGetListRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(blog_type_, other->blog_type_);
    std::swap(page_, other->page_);
    std::swap(page_size_, other->page_size_);
    blog_list_.Swap(&other->blog_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogGetListRsp::GetTypeName() const {
  return "IM.Blog.IMBlogGetListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogAddCommentReq::kUserIdFieldNumber;
const int IMBlogAddCommentReq::kBlogIdFieldNumber;
const int IMBlogAddCommentReq::kBlogDataFieldNumber;
const int IMBlogAddCommentReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogAddCommentReq::IMBlogAddCommentReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogAddCommentReq)
}

void IMBlogAddCommentReq::InitAsDefaultInstance() {
}

IMBlogAddCommentReq::IMBlogAddCommentReq(const IMBlogAddCommentReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogAddCommentReq)
}

void IMBlogAddCommentReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  blog_id_ = 0u;
  blog_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogAddCommentReq::~IMBlogAddCommentReq() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogAddCommentReq)
  SharedDtor();
}

void IMBlogAddCommentReq::SharedDtor() {
  if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blog_data_;
  }
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogAddCommentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogAddCommentReq& IMBlogAddCommentReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogAddCommentReq* IMBlogAddCommentReq::default_instance_ = NULL;

IMBlogAddCommentReq* IMBlogAddCommentReq::New() const {
  return new IMBlogAddCommentReq;
}

void IMBlogAddCommentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogAddCommentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, blog_id_);
    if (has_blog_data()) {
      if (blog_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blog_data_->clear();
      }
    }
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogAddCommentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogAddCommentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blog_id;
        break;
      }

      // required uint32 blog_id = 2;
      case 2: {
        if (tag == 16) {
         parse_blog_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blog_id_)));
          set_has_blog_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blog_data;
        break;
      }

      // required bytes blog_data = 3;
      case 3: {
        if (tag == 26) {
         parse_blog_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blog_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogAddCommentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogAddCommentReq)
  return false;
#undef DO_
}

void IMBlogAddCommentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogAddCommentReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 blog_id = 2;
  if (has_blog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blog_id(), output);
  }

  // required bytes blog_data = 3;
  if (has_blog_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blog_data(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogAddCommentReq)
}

int IMBlogAddCommentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 blog_id = 2;
    if (has_blog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blog_id());
    }

    // required bytes blog_data = 3;
    if (has_blog_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blog_data());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogAddCommentReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogAddCommentReq*>(&from));
}

void IMBlogAddCommentReq::MergeFrom(const IMBlogAddCommentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_blog_id()) {
      set_blog_id(from.blog_id());
    }
    if (from.has_blog_data()) {
      set_blog_data(from.blog_data());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogAddCommentReq::CopyFrom(const IMBlogAddCommentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogAddCommentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMBlogAddCommentReq::Swap(IMBlogAddCommentReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(blog_id_, other->blog_id_);
    std::swap(blog_data_, other->blog_data_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogAddCommentReq::GetTypeName() const {
  return "IM.Blog.IMBlogAddCommentReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogAddCommentRsp::kUserIdFieldNumber;
const int IMBlogAddCommentRsp::kCommentIdFieldNumber;
const int IMBlogAddCommentRsp::kUpdateTimeFieldNumber;
const int IMBlogAddCommentRsp::kResultCodeFieldNumber;
const int IMBlogAddCommentRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogAddCommentRsp::IMBlogAddCommentRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogAddCommentRsp)
}

void IMBlogAddCommentRsp::InitAsDefaultInstance() {
}

IMBlogAddCommentRsp::IMBlogAddCommentRsp(const IMBlogAddCommentRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogAddCommentRsp)
}

void IMBlogAddCommentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  comment_id_ = 0u;
  update_time_ = 0u;
  result_code_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogAddCommentRsp::~IMBlogAddCommentRsp() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogAddCommentRsp)
  SharedDtor();
}

void IMBlogAddCommentRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogAddCommentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogAddCommentRsp& IMBlogAddCommentRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogAddCommentRsp* IMBlogAddCommentRsp::default_instance_ = NULL;

IMBlogAddCommentRsp* IMBlogAddCommentRsp::New() const {
  return new IMBlogAddCommentRsp;
}

void IMBlogAddCommentRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogAddCommentRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(user_id_, result_code_);
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogAddCommentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogAddCommentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // required uint32 comment_id = 2;
      case 2: {
        if (tag == 16) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required uint32 result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogAddCommentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogAddCommentRsp)
  return false;
#undef DO_
}

void IMBlogAddCommentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogAddCommentRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->comment_id(), output);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_time(), output);
  }

  // required uint32 result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_code(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogAddCommentRsp)
}

int IMBlogAddCommentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comment_id());
    }

    // required uint32 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // required uint32 result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result_code());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogAddCommentRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogAddCommentRsp*>(&from));
}

void IMBlogAddCommentRsp::MergeFrom(const IMBlogAddCommentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogAddCommentRsp::CopyFrom(const IMBlogAddCommentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogAddCommentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void IMBlogAddCommentRsp::Swap(IMBlogAddCommentRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(result_code_, other->result_code_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogAddCommentRsp::GetTypeName() const {
  return "IM.Blog.IMBlogAddCommentRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogGetCommentReq::kUserIdFieldNumber;
const int IMBlogGetCommentReq::kBlogIdFieldNumber;
const int IMBlogGetCommentReq::kUpdateTimeFieldNumber;
const int IMBlogGetCommentReq::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogGetCommentReq::IMBlogGetCommentReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogGetCommentReq)
}

void IMBlogGetCommentReq::InitAsDefaultInstance() {
}

IMBlogGetCommentReq::IMBlogGetCommentReq(const IMBlogGetCommentReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogGetCommentReq)
}

void IMBlogGetCommentReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  blog_id_ = 0u;
  update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogGetCommentReq::~IMBlogGetCommentReq() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogGetCommentReq)
  SharedDtor();
}

void IMBlogGetCommentReq::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogGetCommentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogGetCommentReq& IMBlogGetCommentReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogGetCommentReq* IMBlogGetCommentReq::default_instance_ = NULL;

IMBlogGetCommentReq* IMBlogGetCommentReq::New() const {
  return new IMBlogGetCommentReq;
}

void IMBlogGetCommentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogGetCommentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(user_id_, blog_id_);
    update_time_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogGetCommentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogGetCommentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blog_id;
        break;
      }

      // required uint32 blog_id = 2;
      case 2: {
        if (tag == 16) {
         parse_blog_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blog_id_)));
          set_has_blog_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogGetCommentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogGetCommentReq)
  return false;
#undef DO_
}

void IMBlogGetCommentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogGetCommentReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 blog_id = 2;
  if (has_blog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blog_id(), output);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_time(), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogGetCommentReq)
}

int IMBlogGetCommentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 blog_id = 2;
    if (has_blog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blog_id());
    }

    // required uint32 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogGetCommentReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogGetCommentReq*>(&from));
}

void IMBlogGetCommentReq::MergeFrom(const IMBlogGetCommentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_blog_id()) {
      set_blog_id(from.blog_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogGetCommentReq::CopyFrom(const IMBlogGetCommentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogGetCommentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void IMBlogGetCommentReq::Swap(IMBlogGetCommentReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(blog_id_, other->blog_id_);
    std::swap(update_time_, other->update_time_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogGetCommentReq::GetTypeName() const {
  return "IM.Blog.IMBlogGetCommentReq";
}


// ===================================================================

#ifndef _MSC_VER
const int IMBlogGetCommentRsp::kUserIdFieldNumber;
const int IMBlogGetCommentRsp::kBlogIdFieldNumber;
const int IMBlogGetCommentRsp::kUpdateTimeFieldNumber;
const int IMBlogGetCommentRsp::kCommentListFieldNumber;
const int IMBlogGetCommentRsp::kAttachDataFieldNumber;
#endif  // !_MSC_VER

IMBlogGetCommentRsp::IMBlogGetCommentRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Blog.IMBlogGetCommentRsp)
}

void IMBlogGetCommentRsp::InitAsDefaultInstance() {
}

IMBlogGetCommentRsp::IMBlogGetCommentRsp(const IMBlogGetCommentRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IM.Blog.IMBlogGetCommentRsp)
}

void IMBlogGetCommentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  blog_id_ = 0u;
  update_time_ = 0u;
  attach_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IMBlogGetCommentRsp::~IMBlogGetCommentRsp() {
  // @@protoc_insertion_point(destructor:IM.Blog.IMBlogGetCommentRsp)
  SharedDtor();
}

void IMBlogGetCommentRsp::SharedDtor() {
  if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete attach_data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void IMBlogGetCommentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IMBlogGetCommentRsp& IMBlogGetCommentRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_IM_2eBlog_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_IM_2eBlog_2eproto();
#endif
  return *default_instance_;
}

IMBlogGetCommentRsp* IMBlogGetCommentRsp::default_instance_ = NULL;

IMBlogGetCommentRsp* IMBlogGetCommentRsp::New() const {
  return new IMBlogGetCommentRsp;
}

void IMBlogGetCommentRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<IMBlogGetCommentRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(user_id_, blog_id_);
    update_time_ = 0u;
    if (has_attach_data()) {
      if (attach_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        attach_data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  comment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool IMBlogGetCommentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:IM.Blog.IMBlogGetCommentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blog_id;
        break;
      }

      // required uint32 blog_id = 2;
      case 2: {
        if (tag == 16) {
         parse_blog_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blog_id_)));
          set_has_blog_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 3;
      case 3: {
        if (tag == 24) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_comment_list;
        break;
      }

      // repeated .IM.BaseDefine.BlogInfo comment_list = 4;
      case 4: {
        if (tag == 34) {
         parse_comment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_comment_list;
        if (input->ExpectTag(162)) goto parse_attach_data;
        break;
      }

      // optional bytes attach_data = 20;
      case 20: {
        if (tag == 162) {
         parse_attach_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Blog.IMBlogGetCommentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Blog.IMBlogGetCommentRsp)
  return false;
#undef DO_
}

void IMBlogGetCommentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Blog.IMBlogGetCommentRsp)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint32 blog_id = 2;
  if (has_blog_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blog_id(), output);
  }

  // required uint32 update_time = 3;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_time(), output);
  }

  // repeated .IM.BaseDefine.BlogInfo comment_list = 4;
  for (int i = 0; i < this->comment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->comment_list(i), output);
  }

  // optional bytes attach_data = 20;
  if (has_attach_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:IM.Blog.IMBlogGetCommentRsp)
}

int IMBlogGetCommentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint32 blog_id = 2;
    if (has_blog_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blog_id());
    }

    // required uint32 update_time = 3;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // optional bytes attach_data = 20;
    if (has_attach_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attach_data());
    }

  }
  // repeated .IM.BaseDefine.BlogInfo comment_list = 4;
  total_size += 1 * this->comment_list_size();
  for (int i = 0; i < this->comment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMBlogGetCommentRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IMBlogGetCommentRsp*>(&from));
}

void IMBlogGetCommentRsp::MergeFrom(const IMBlogGetCommentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_list_.MergeFrom(from.comment_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_blog_id()) {
      set_blog_id(from.blog_id());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_attach_data()) {
      set_attach_data(from.attach_data());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void IMBlogGetCommentRsp::CopyFrom(const IMBlogGetCommentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMBlogGetCommentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->comment_list())) return false;
  return true;
}

void IMBlogGetCommentRsp::Swap(IMBlogGetCommentRsp* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(blog_id_, other->blog_id_);
    std::swap(update_time_, other->update_time_);
    comment_list_.Swap(&other->comment_list_);
    std::swap(attach_data_, other->attach_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.swap(other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IMBlogGetCommentRsp::GetTypeName() const {
  return "IM.Blog.IMBlogGetCommentRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Blog
}  // namespace IM

// @@protoc_insertion_point(global_scope)
